---
title: "Day 1B Practice"
format:
  html:
    df-print: paged
---

![](../img/spreadsheets_2780E3.svg){.hero}

## Question 1.

The following table summarizes the season information for the eight seasons of AMC's *Breaking Bad* show. Tidy up this data and save it to a tibble. Decide for yourself how to handle season 5 (should it be a single observation or two?). For the first and last aired dates, just store the year as a number.

![](../img/breaking_bad_wikipedia.png)

<p><details>
<summary>Click here for the answer key</summary><blockquote>

Version with one observation for the season five parts
```{r}
#| message: false

library(tidyverse)
season <- c(1, 2, 3, 4, 5)
episodes <- c(7, 13, 13, 13, 16)
first_air <- c(2008, 2009, 2010, 2011, 2012)
last_air <- c(2008, 2009, 2010, 2011, 2013)
network <- "AMC"
breaking_bad <- 
  tibble(season, episodes, first_air, last_air, network)
breaking_bad
```

Version with two separate observations for the season five parts

```{r}
library(tidyverse)
season <- c(1, 2, 3, 4, 5.1, 5.2)
episodes <- c(7, 13, 13, 13, 8, 8)
first_air <- c(2008, 2009, 2010, 2011, 2012, 2013)
last_air <- c(2008, 2009, 2010, 2011, 2012, 2013)
network <- "AMC"
breaking_bad <- 
  tibble(season, episodes, first_air, last_air, network)
breaking_bad
```

</blockquote></details></p>

## Question 2.

Load the `economics` tibble (included in \{tidyverse\}). Then create a pipeline to accomplish the following data wrangling steps:

a)  First, in the `economics` tibble, rename the `uempmed` variable (the median duration of enemployment, in weeks) to `duration` and the `unemploy` variable (the number of unemployed, in thousands) to `number`.
b)  Then add a new variable called `rate` that is calculated by dividing `number` (from part a) by `pop` (the total population, in thousands).
c)  Then drop (i.e., unselect) the `pce`, `pop`, and `psavert` variables from the tibble.
d)  Then relocate the `rate` variable to be between the `date` and `duration` variables.

<p><details>
<summary>Click here for the answer key</summary>
<blockquote>

**Answer (a)**

```{r}
economics |> 
  rename(duration = uempmed, number = unemploy)
```

**Answer (b)**

```{r}
economics |> 
  rename(duration = uempmed, number = unemploy) |> 
  mutate(rate = number / pop)
```

**Answer (c)**

```{r}
economics |> 
  rename(duration = uempmed, number = unemploy) |> 
  mutate(rate = number / pop) |> 
  select(-c(pce, pop, psavert))
```

**Answer (d)**

```{r}
economics |>
  rename(duration = uempmed, number = unemploy) |> 
  mutate(rate = number / pop) |> 
  select(-c(pce, pop, psavert)) |> 
  relocate(rate, .after = date)
```

</blockquote>
</details></p>

## Question 3.

Download the [cereal](https://pittmethods.github.io/r4ss/data/cereal.csv) data file from the [workshop website](../Details/datasets.qmd). Copy it to your Project folder and read it into R as a tibble. Then create a pipeline to produce a short list of cereals for me to try. I am only interested in cold cereals with a rating greater than 70. Please arrange the list so that the cereals with the fewest calories are displayed at the top. Finally, write the result of this pipeline to a CSV file called "jeffs_list.csv" (I expect it to be even more popular than Craig's list).

<p><details>
<summary>Click here for the answer key</summary>
<blockquote>

```{r}
#| eval: false
#| message: false

cereal <- read_csv("cereal.csv") 

jeffs_list <- 
  cereal |> 
  filter(type == "cold" & rating > 70) |> 
  arrange(calories)

jeffs_list
```

```{r}
#| echo: false
#| message: false

cereal <- read_csv("../data/cereal.csv") 

jeffs_list <- 
  cereal |> 
  filter(type == "cold" & rating > 70) |> 
  arrange(calories)

jeffs_list
```

```{r}
#| eval: false

write_csv(jeffs_list, "jeffs_list.csv")
```

</blockquote>
</details></p>

## Resources

-   [Broman & Woo (2018)](https://www.tandfonline.com/doi/full/10.1080/00031305.2017.1375989): Read more about tidy data principles

-   [R4DS Chapter 5](https://r4ds.had.co.nz/transform.html) (§5.1–§5.5): Read more about the basic wrangling verbs 

-   [R4DS Chapter 10](https://r4ds.had.co.nz/tibbles.html): Read more about tibbles and data frames

-   [R4DS Chapter 11](https://r4ds.had.co.nz/data-import.html): Read more about data reading and writing

## Fun Stuff

### Fundamentals of Tidying

She doesn't like formatting-as-data either...

<iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/bjUlC8aEb7s" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

### Stunt Rope

These are some advanced wrangling verbs...

<iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/flcFl8z_hF4?start=99" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
