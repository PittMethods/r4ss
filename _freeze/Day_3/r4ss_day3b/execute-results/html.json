{
  "hash": "d7efc20fe8b5d2bafce9dd2ede8e9005",
  "result": {
    "markdown": "---\nformat: \n  revealjs:\n    css: ../styles.css\n    slide-number: true\n    show-slide-number: all\n    preview-links: auto\n    self-contained: true\n    progress: true\n    history: true\n    hash-type: number\n    theme: default\n    code-block-background: true\n    highlight-style: zenburn\n    code-link: false\n    code-copy: true\n    pagetitle: \"R4SS Day 3B\"\n    author-meta: \"Jeffrey Girard\"\n    date-meta: \"2022-07-27\"\n---\n\n\n::: {.my-title}\n# [Introduction to R]{.blue} <br />for Social Scientists\n\n::: {.my-grey}\n[Workshop Day 3B | 2022-07-27]{}<br />\n[Jeffrey M. Girard | Pitt Methods]{}\n:::\n\n![](../img/proud_coder_357EDD.svg){.absolute bottom=0 right=0 width=400}\n:::\n\n<!-- Model II -->\n\n# Model II \n\n## Basic Regression\n\n::: {.columns .pv4}\n::: {.column width=\"60%\"}\nA\n\n::: {.fragment .mt1}\nB\n:::\n\n::: {.fragment .mt1}\nC\n:::\n:::\n\n::: {.column .tc .pv5 width=\"40%\"}\n\n{{< li ogfgksuz trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}\n\n\n:::\n:::\n\n::: footer\n\\[3A\\] Model II\n:::\n\n## Basic Regression Live Coding\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n# SETUP: Load the used packages (if needed) and read in the example dataset\n\nlibrary(tidyverse)\nlibrary(datawizard)\nlibrary(parameters)\nlibrary(performance)\nlibrary(effects)\nlibrary(ggeffects)\n\nsalaries <- read_csv(\"salaries.csv\")\nsalaries\n\n# ==============================================================================\n\n# \n\nfit <- lm(\n  formula = salary ~ yrs.since.phd,\n  data = salaries\n)\n\nfit\n\nmodel_parameters(fit)\n\n# Centering the predictor\n\nsalaries <- mutate(salaries, yrs.since.phd.c = center(yrs.since.phd))\n\nfit_c <- lm(\n  formula = salary ~ yrs.since.phd.c,\n  data = salaries\n)\n\nmodel_parameters(fit_c)\n\n# Standardized results\n\nmodel_parameters(fit, standardize = \"refit\")\n\n# Model performance\n\nmodel_performance(fit)\n\n# Plotting\n\nplot(ggeffect(fit, terms = \"yrs.since.phd\"))\n\nplot(ggeffect(fit, terms = \"yrs.since.phd\"), add.data = TRUE)\n```\n:::\n\n\n::: footer\n\\[3A\\] Model II\n:::\n\n## Multiple Regression\n\n::: {.columns .pv4}\n::: {.column width=\"60%\"}\nA\n\n::: {.fragment .mt1}\nB\n:::\n\n::: {.fragment .mt1}\nC\n:::\n:::\n\n::: {.column .tc .pv5 width=\"40%\"}\n\n{{< li jmkpuued trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}\n\n\n:::\n:::\n\n::: footer\n\\[3A\\] Model II\n:::\n\n## Multiple Regression Live Coding\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n# SETUP: Load the used packages (if needed) and read in the example dataset\n\nlibrary(tidyverse)\nlibrary(datawizard)\nlibrary(parameters)\nlibrary(performance)\nlibrary(ggeffects)\n\nsalaries <- read_csv(\"salaries.csv\")\nsalaries\n\n# ==============================================================================\n\nfit2 <- lm(\n  formula = salary ~ yrs.since.phd + yrs.service,\n  data = salaries\n)\n\nmodel_parameters(fit2)\n\nmodel_parameters(fit2, standardize = \"refit\")\n\nmodel_performance(fit2)\n\n# Plotting marginal effects\n\nplot(ggeffect(fit2, terms = \"yrs.since.phd\"))\n\nplot(ggeffect(fit2, terms = \"yrs.service\"))\n\n# Compare to the model with just years since PhD\n\ncompare_parameters(fit, fit2)\n\ncompare_performance(fit, fit2)\n\nanova(fit, fit2)\n```\n:::\n\n\n::: footer\n\\[3A\\] Model II\n:::\n\n## Categorical Predictors\n\n::: {.columns .pv4}\n::: {.column width=\"60%\"}\nA\n\n::: {.fragment .mt1}\nB\n:::\n\n::: {.fragment .mt1}\nC\n:::\n:::\n\n::: {.column .tc .pv5 width=\"40%\"}\n\n{{< li rwotyanb trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}\n\n\n:::\n:::\n\n::: footer\n\\[3A\\] Model II\n:::\n\n## Categorical Live Coding\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\nlibrary(tidyverse)\nlibrary(datawizard)\nlibrary(modelbased)\nlibrary(parameters)\nlibrary(performance)\nlibrary(ggeffects)\n\nsalaries <- read_csv(\"salaries.csv\")\nsalaries\n\n# ==============================================================================\n\n# Example with two levels\n\nfit <- lm(salary ~ sex, data = salaries)\n\nmodel_parameters(fit)\n\nmodel_parameters(fit, standardize = \"refit\")\n\nmodel_performance(fit)\n\nplot(ggeffect(fit, terms = \"sex\"))\n\nestimate_means(fit, at = \"sex\")\n\n# Change the reference group (whatever level is first)\n\nsalaries2 <- salaries |> mutate(sex = factor(sex, levels = c(\"Male\", \"Female\")))\n\nfit2 <- lm(salary ~ sex, data = salaries2)\n\nmodel_parameters(fit2)\n\n# Example with three levels\n\nfit2 <- lm(salary ~ rank, data = salaries)\n\nmodel_parameters(fit2)\n\nmodel_parameters(fit2, standardize = \"refit\")\n\nmodel_performance(fit2)\n\nplot(ggeffect(fit2, terms = \"rank\"))\n\nestimate_means(fit2, at = \"rank\")\n\nfit2 |> aov() |> model_parameters()\n\n# Example with categorical and continuous predictors\n\nfit3 <- lm(salary ~ rank + yrs.since.phd, \n           data = salaries)\n\nmodel_parameters(fit3)\n\nmodel_parameters(fit3, standardize = \"refit\")\n\nmodel_performance(fit3)\n\nggeffect(fit3, terms = c(\"yrs.since.phd\", \"rank\")) |> plot()\n```\n:::\n\n\n::: footer\n\\[3A\\] Model II\n:::\n\n## Interaction Effects\n\n::: {.columns .pv4}\n::: {.column width=\"60%\"}\nA\n\n::: {.fragment .mt1}\nB\n:::\n\n::: {.fragment .mt1}\nC\n:::\n:::\n\n::: {.column .tc .pv5 width=\"40%\"}\n\n{{< li nmlpnruz trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}\n\n\n:::\n:::\n\n::: footer\n\\[3A\\] Model II\n:::\n\n## Interactions Live Coding\n\n\n::: {.cell}\n\n:::\n\n\n::: footer\n\\[3A\\] Model II\n:::\n\n## Regression Diagnostics\n\n::: {.columns .pv4}\n::: {.column width=\"60%\"}\nA\n\n::: {.fragment .mt1}\nB\n:::\n\n::: {.fragment .mt1}\nC\n:::\n:::\n\n::: {.column .tc .pv5 width=\"40%\"}\n\n{{< li oamdefle trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}\n\n\n:::\n:::\n\n::: footer\n\\[3A\\] Model II\n:::\n\n## Diagnostics Live Coding\n\n\n::: {.cell}\n\n:::\n\n\n::: footer\n\\[3A\\] Model II\n:::\n\n## Polynomial Regression\n\n::: {.columns .pv4}\n::: {.column width=\"60%\"}\nA\n\n::: {.fragment .mt1}\nB\n:::\n\n::: {.fragment .mt1}\nC\n:::\n:::\n\n::: {.column .tc .pv5 width=\"40%\"}\n\n{{< li lcellbfh trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}\n\n\n:::\n:::\n\n::: footer\n\\[3A\\] Model II\n:::\n\n## Polynomial Live Coding\n\n\n::: {.cell}\n\n:::\n\n\n::: footer\n\\[3A\\] Model II\n:::\n\n## Logistic Regression\n\n::: {.columns .pv4}\n::: {.column width=\"60%\"}\nA\n\n::: {.fragment .mt1}\nB\n:::\n\n::: {.fragment .mt1}\nC\n:::\n:::\n\n::: {.column .tc .pv5 width=\"40%\"}\n\n{{< li lcellbfh trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}\n\n\n:::\n:::\n\n::: footer\n\\[3A\\] Model II\n:::\n\n## Logistic Live Coding\n\n\n::: {.cell}\n\n:::\n\n\n::: footer\n\\[3A\\] Model II\n:::\n\n\n<!-- Practice V -->\n\n# [Practice V](https://pittmethods.github.io/r4ss/Day_3/Day3B_Practice.html){preview-link=\"false\"}\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\r\n<script>\r\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\r\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\r\n  // slide changes (different for each slide format).\r\n  (function () {\r\n    function fireSlideChanged(previousSlide, currentSlide) {\r\n\r\n      // dispatch for htmlwidgets\r\n      const event = window.document.createEvent(\"Event\");\r\n      event.initEvent(\"slideenter\", true, true);\r\n      window.document.dispatchEvent(event);\r\n\r\n      // dispatch for shiny\r\n      if (window.jQuery) {\r\n        if (previousSlide) {\r\n          window.jQuery(previousSlide).trigger(\"hidden\");\r\n        }\r\n        if (currentSlide) {\r\n          window.jQuery(currentSlide).trigger(\"shown\");\r\n        }\r\n      }\r\n    }\r\n\r\n    // hookup for reveal\r\n    if (window.Reveal) {\r\n      window.Reveal.addEventListener(\"slidechanged\", function(event) {\r\n        fireSlideChanged(event.previousSlide, event.currentSlide);\r\n      });\r\n    }\r\n\r\n    // hookup for slidy\r\n    if (window.w3c_slidy) {\r\n      window.w3c_slidy.add_observer(function (slide_num) {\r\n        // slide_num starts at position 1\r\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\r\n      });\r\n    }\r\n\r\n  })();\r\n</script>\r\n\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}