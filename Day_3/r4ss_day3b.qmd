---
format: 
  revealjs:
    css: ../styles.css
    slide-number: true
    show-slide-number: all
    preview-links: auto
    self-contained: true
    progress: true
    history: true
    hash-type: number
    theme: default
    code-block-background: true
    highlight-style: zenburn
    code-link: false
    code-copy: true
    pagetitle: "R4SS Day 3B"
    author-meta: "Jeffrey Girard"
    date-meta: "2022-07-27"
---

::: {.my-title}
# [Introduction to R]{.blue} <br />for Social Scientists

::: {.my-grey}
[Workshop Day 3B | 2022-07-27]{}<br />
[Jeffrey M. Girard | Pitt Methods]{}
:::

![](../img/proud_coder_357EDD.svg){.absolute bottom=0 right=0 width=400}
:::

<!-- Model II -->

# Model II 

## Basic Regression

::: {.columns .pv4}
::: {.column width="60%"}
A

::: {.fragment .mt1}
B
:::

::: {.fragment .mt1}
C
:::
:::

::: {.column .tc .pv5 width="40%"}
{{< li ogfgksuz trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}
:::
:::

::: footer
\[3A\] Model II
:::

## Basic Regression Live Coding

```{r}
#| echo: true
#| eval: false
#| error: true
#| code-line-numbers: false

# SETUP: Load the used packages (if needed) and read in the example dataset

library(tidyverse)
library(datawizard)
library(parameters)
library(performance)
library(effects)
library(ggeffects)

salaries <- read_csv("salaries.csv")
salaries

# ==============================================================================

# 

fit <- lm(
  formula = salary ~ yrs.since.phd,
  data = salaries
)

fit

model_parameters(fit)

# Centering the predictor

salaries <- mutate(salaries, yrs.since.phd.c = center(yrs.since.phd))

fit_c <- lm(
  formula = salary ~ yrs.since.phd.c,
  data = salaries
)

model_parameters(fit_c)

# Standardized results

model_parameters(fit, standardize = "refit")

# Model performance

model_performance(fit)

# Plotting

plot(ggeffect(fit, terms = "yrs.since.phd"))

plot(ggeffect(fit, terms = "yrs.since.phd"), add.data = TRUE)
```

::: footer
\[3A\] Model II
:::

## Multiple Regression

::: {.columns .pv4}
::: {.column width="60%"}
A

::: {.fragment .mt1}
B
:::

::: {.fragment .mt1}
C
:::
:::

::: {.column .tc .pv5 width="40%"}
{{< li jmkpuued trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}
:::
:::

::: footer
\[3A\] Model II
:::

## Multiple Regression Live Coding

```{r}
#| echo: true
#| eval: false
#| error: true
#| code-line-numbers: false

# SETUP: Load the used packages (if needed) and read in the example dataset

library(tidyverse)
library(datawizard)
library(parameters)
library(performance)
library(ggeffects)

salaries <- read_csv("salaries.csv")
salaries

# ==============================================================================

fit2 <- lm(
  formula = salary ~ yrs.since.phd + yrs.service,
  data = salaries
)

model_parameters(fit2)

model_parameters(fit2, standardize = "refit")

model_performance(fit2)

# Plotting marginal effects

plot(ggeffect(fit2, terms = "yrs.since.phd"))

plot(ggeffect(fit2, terms = "yrs.service"))

# Compare to the model with just years since PhD

compare_parameters(fit, fit2)

compare_performance(fit, fit2)

anova(fit, fit2)
```

::: footer
\[3A\] Model II
:::

## Categorical Predictors

::: {.columns .pv4}
::: {.column width="60%"}
A

::: {.fragment .mt1}
B
:::

::: {.fragment .mt1}
C
:::
:::

::: {.column .tc .pv5 width="40%"}
{{< li rwotyanb trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}
:::
:::

::: footer
\[3A\] Model II
:::

## Categorical Live Coding

```{r}
#| echo: true
#| eval: false
#| error: true
#| code-line-numbers: false

library(tidyverse)
library(datawizard)
library(modelbased)
library(parameters)
library(performance)
library(ggeffects)

salaries <- read_csv("salaries.csv")
salaries

# ==============================================================================

# Example with two levels

fit <- lm(salary ~ sex, data = salaries)

model_parameters(fit)

model_parameters(fit, standardize = "refit")

model_performance(fit)

plot(ggeffect(fit, terms = "sex"))

estimate_means(fit, at = "sex")

# Change the reference group (whatever level is first)

salaries2 <- salaries |> mutate(sex = factor(sex, levels = c("Male", "Female")))

fit2 <- lm(salary ~ sex, data = salaries2)

model_parameters(fit2)

# Example with three levels

fit2 <- lm(salary ~ rank, data = salaries)

model_parameters(fit2)

model_parameters(fit2, standardize = "refit")

model_performance(fit2)

plot(ggeffect(fit2, terms = "rank"))

estimate_means(fit2, at = "rank")

fit2 |> aov() |> model_parameters()

# Example with categorical and continuous predictors

fit3 <- lm(salary ~ rank + yrs.since.phd, 
           data = salaries)

model_parameters(fit3)

model_parameters(fit3, standardize = "refit")

model_performance(fit3)

ggeffect(fit3, terms = c("yrs.since.phd", "rank")) |> plot()
```

::: footer
\[3A\] Model II
:::

## Interaction Effects

::: {.columns .pv4}
::: {.column width="60%"}
A

::: {.fragment .mt1}
B
:::

::: {.fragment .mt1}
C
:::
:::

::: {.column .tc .pv5 width="40%"}
{{< li nmlpnruz trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}
:::
:::

::: footer
\[3A\] Model II
:::

## Interactions Live Coding

```{r}
#| echo: true
#| eval: false
#| error: true
#| code-line-numbers: false


```

::: footer
\[3A\] Model II
:::

## Regression Diagnostics

::: {.columns .pv4}
::: {.column width="60%"}
A

::: {.fragment .mt1}
B
:::

::: {.fragment .mt1}
C
:::
:::

::: {.column .tc .pv5 width="40%"}
{{< li oamdefle trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}
:::
:::

::: footer
\[3A\] Model II
:::

## Diagnostics Live Coding

```{r}
#| echo: true
#| eval: false
#| error: true
#| code-line-numbers: false


```

::: footer
\[3A\] Model II
:::

## Polynomial Regression

::: {.columns .pv4}
::: {.column width="60%"}
A

::: {.fragment .mt1}
B
:::

::: {.fragment .mt1}
C
:::
:::

::: {.column .tc .pv5 width="40%"}
{{< li lcellbfh trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}
:::
:::

::: footer
\[3A\] Model II
:::

## Polynomial Live Coding

```{r}
#| echo: true
#| eval: false
#| error: true
#| code-line-numbers: false


```

::: footer
\[3A\] Model II
:::

## Logistic Regression

::: {.columns .pv4}
::: {.column width="60%"}
A

::: {.fragment .mt1}
B
:::

::: {.fragment .mt1}
C
:::
:::

::: {.column .tc .pv5 width="40%"}
{{< li lcellbfh trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}
:::
:::

::: footer
\[3A\] Model II
:::

## Logistic Live Coding

```{r}
#| echo: true
#| eval: false
#| error: true
#| code-line-numbers: false


```

::: footer
\[3A\] Model II
:::


<!-- Practice V -->

# [Practice V](https://pittmethods.github.io/r4ss/Day_3/Day3B_Practice.html){preview-link="false"}
